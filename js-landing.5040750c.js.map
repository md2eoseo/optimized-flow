{"version":3,"sources":["js-landing.js"],"names":["DB_URL","API_KEY","checkValidationBeforeSubmit","e","target","value","classList","remove","checkValidity","parentNode","querySelector","add","submitInfo","preventDefault","checkValidation","form","elements","full_name","work_email","job_title","country","company","agree","full_name_p","work_email_p","job_title_p","agree_p","trim","document","querySelectorAll","forEach","ele","checkData","console","log","focus","error","data","fetch","method","headers","then","res","json","exist","length","$inc","cnt","put","_id","post","id","putData","JSON","stringify","body","localStorage","setItem","window","location","catch","postData","isClientSubmitted","client","parse","getItem","textContent","addEventListener","setAttribute"],"mappings":"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","file":"js-landing.5040750c.js","sourceRoot":"..","sourcesContent":["\"use strict\";\r\nconst DB_URL = \"https://todoweb-a2c8.restdb.io/rest/client\";\r\nconst API_KEY = \"5e9e0988436377171a0c266d\";\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n  const form = document.querySelector(\".form form\");\r\n  form.setAttribute(\"novalidate\", true);\r\n  form\r\n    .querySelectorAll(\"[required]\")\r\n    .forEach((ele) =>\r\n      ele.addEventListener(\"input\", checkValidationBeforeSubmit)\r\n    );\r\n  form.addEventListener(\"submit\", submitInfo);\r\n  isClientSubmitted();\r\n});\r\n\r\nfunction checkValidationBeforeSubmit(e) {\r\n  e.target.value = e.target.value;\r\n  e.target.classList.remove(\"invalid\");\r\n  if (!e.target.checkValidity()) {\r\n    e.target.classList.add(\"invalid\");\r\n    e.target.parentNode.querySelector(\"p\").classList.remove(\"hidden\");\r\n  } else {\r\n    e.target.parentNode.querySelector(\"p\").classList.add(\"hidden\");\r\n  }\r\n}\r\n\r\nfunction submitInfo(e) {\r\n  e.preventDefault();\r\n  checkValidation(e.target);\r\n}\r\n\r\nfunction checkValidation(form) {\r\n  const elements = form.elements;\r\n  const full_name = elements.full_name;\r\n  const work_email = elements.work_email;\r\n  const job_title = elements.job_title;\r\n  const country = elements.country;\r\n  const company = elements.company;\r\n  const agree = elements.agree;\r\n  const full_name_p = form.querySelector(\"#full_name_p\");\r\n  const work_email_p = form.querySelector(\"#work_email_p\");\r\n  const job_title_p = form.querySelector(\"#job_title_p\");\r\n  const agree_p = form.querySelector(\"#agree_p\");\r\n  full_name.value = full_name.value.trim();\r\n  work_email.value = work_email.value.trim();\r\n  job_title.value = job_title.value.trim();\r\n  company.value = company.value.trim();\r\n\r\n  // initialize previous invalid inputs\r\n  document.querySelectorAll(\"input, select\").forEach((ele) => {\r\n    ele.classList.remove(\"invalid\");\r\n  });\r\n\r\n  if (form.checkValidity()) {\r\n    checkData({\r\n      full_name: full_name.value,\r\n      work_email: work_email.value,\r\n      job_title: job_title.value,\r\n      country: country.value,\r\n      company: company.value,\r\n    });\r\n    console.log(\"submitted \" + work_email.value.trim());\r\n    return true;\r\n  } else {\r\n    // check every inputs' validity\r\n    if (!job_title.checkValidity()) {\r\n      job_title.classList.add(\"invalid\");\r\n      job_title_p.classList.remove(\"hidden\");\r\n      job_title.focus();\r\n    } else {\r\n      job_title_p.classList.add(\"hidden\");\r\n    }\r\n    if (!work_email.checkValidity()) {\r\n      work_email.classList.add(\"invalid\");\r\n      work_email_p.classList.remove(\"hidden\");\r\n      work_email.focus();\r\n    } else {\r\n      work_email_p.classList.add(\"hidden\");\r\n    }\r\n    if (!full_name.checkValidity()) {\r\n      full_name.classList.add(\"invalid\");\r\n      full_name_p.classList.remove(\"hidden\");\r\n      full_name.focus();\r\n    } else {\r\n      full_name_p.classList.add(\"hidden\");\r\n    }\r\n    if (!agree.checkValidity()) {\r\n      agree.classList.add(\"invalid\");\r\n      agree_p.classList.remove(\"hidden\");\r\n      agree.focus();\r\n    } else {\r\n      agree_p.classList.add(\"hidden\");\r\n    }\r\n\r\n    console.error(\"Validation False!\");\r\n  }\r\n}\r\n\r\nfunction checkData(data) {\r\n  fetch(`${DB_URL}?q={\"work_email\": \"${data.work_email}\"}`, {\r\n    method: \"get\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json; charset=utf-8\",\r\n      \"x-apikey\": API_KEY,\r\n      \"cache-control\": \"no-cache\",\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((exist) => {\r\n      if (!exist.length) {\r\n        data.cnt = 1;\r\n        post(data);\r\n      } else {\r\n        data.$inc = { cnt: 1 };\r\n        put(data, exist[0]._id);\r\n      }\r\n    });\r\n}\r\n\r\nfunction put(data, id) {\r\n  const putData = JSON.stringify(data);\r\n  fetch(`${DB_URL}/${id}`, {\r\n    method: \"put\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json; charset=utf-8\",\r\n      \"x-apikey\": API_KEY,\r\n      \"cache-control\": \"no-cache\",\r\n    },\r\n    body: putData,\r\n  })\r\n    .then((res) => res.json())\r\n    .then(() => {\r\n      console.log(`already ${data.work_email} existsd!`);\r\n      localStorage.setItem(\"isClientSubmitted\", [JSON.stringify(data)]);\r\n    })\r\n    .then(() => (window.location = \"asset.html\"))\r\n    .catch((error) => {\r\n      console.error(`PUT ERROR: ${error}`);\r\n    });\r\n}\r\n\r\nfunction post(data) {\r\n  const postData = JSON.stringify(data);\r\n  fetch(DB_URL, {\r\n    method: \"post\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json; charset=utf-8\",\r\n      \"x-apikey\": API_KEY,\r\n      \"cache-control\": \"no-cache\",\r\n    },\r\n    body: postData,\r\n  })\r\n    .then((res) => res.json())\r\n    .then(() => {\r\n      console.log(`inserted ${postData} into client list!`);\r\n      localStorage.setItem(\"isClientSubmitted\", [JSON.stringify(data)]);\r\n    })\r\n    .then(() => (window.location = \"asset.html\"))\r\n    .catch((error) => {\r\n      console.error(`POST ERROR: ${error}`);\r\n    });\r\n}\r\n\r\nfunction isClientSubmitted() {\r\n  const client = JSON.parse(localStorage.getItem(\"isClientSubmitted\"));\r\n\r\n  if (client != null) {\r\n    document.querySelector(\r\n      \"#tagline3\"\r\n    ).textContent = `Welcome back, ${client.full_name}!`;\r\n    document.querySelector(\"#subs-btn\").textContent = \"To the Asset\";\r\n    document\r\n      .querySelector(\"#subs-btn\")\r\n      .addEventListener(\"click\", () => (window.location = \"asset.html\"));\r\n  } else {\r\n    document.querySelector(\"#subs-btn\").addEventListener(\"click\", () => {\r\n      window.location = \"#form\";\r\n      document.querySelector(\".form form\").elements.full_name.focus();\r\n    });\r\n  }\r\n}\r\n"]}